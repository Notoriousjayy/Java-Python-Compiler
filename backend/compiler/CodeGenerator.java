package backend.compiler;

import backend.*;
import intermediate.*;
import message.*;

import static message.MessageType.COMPILER_SUMMARY;

/*
 * code generator for a compiler back end
 */

public class CodeGenerator extends Backend {
	/*
	 * Process the intermediate code and the symbol table generated by the
	 * parser to generate machine-language instructions.
	 * @param iCode the intermediate code.
	 * @param symTab the symbol table.
	 * @throws Exception if an error occurred.
	 */
	public void process(ICode icode, SymTab symTab)
	throws Exception{
		long startTime = System.currentTimeMillis();
		float elapsedTime = (System.currentTimeMillis() - startTime)/1000f;	//elapsed code generation time
		int instructionCount = 0;		// number of instructions generated
		
		//Send the compiler summary message.
		sendMessage(new Message(COMPILER_SUMMARY,new Number[] {instructionCount, elapsedTime}));
	}
}
