package backend;

import intermediate.*;
import message.*;

/*
 * framework class that represents the backend component
 */

public abstract class  Backend implements MessageProducer{
	protected static MessageHandler messageHandler;
	
	static {
		messageHandler = new MessageHandler();
	}
	protected SymTab symTab;
	protected ICode iCode;
	/**
	 * @return the messageHandler
	 */
	public static MessageHandler getMessageHandler() {
		return messageHandler;
	}
	/**
	 * @return the symTab
	 */
	public SymTab getSymTab() {
		return symTab;
	}
	/**
	 * @return the iCode
	 */
	public ICode getiCode() {
		return iCode;
	}
	/*
	 * Process the intermediate code and the symbol table generated by the parser.
	 * To be implemented or an interpreter subclass.
	 * @param iCode the intermediate code.
	 * @param symTab the symbol table.
	 * @throws Exception if an error occurred.
	 */
	public abstract void process(ICode iCode, SymTab symTab)
	throws Exception;
	
	/*
	 * Notify listeners after setting the message.
	 * @param message the message to set.
	 */
	public void sendMessage(Message message) {
		messageHandler.sendMessage(message);
	}
	/*
	 * Add a parser message listener.
	 * @param listener the message listener to ass.
	 */
	public void addMessageListener(MessageListener listener) {
		messageHandler.addListener(listener);
	}
	/*
	 * Remove a parser message listener.
	 * @param lsitener the message listener to remove
	 */
	public void removeMessageListener(MessageListener listener) {
		messageHandler.removeListener(listener);
	}
}
